
/**
 * 
 * A RejuvenationPotion is like both a health and mana potion combined.
 * Consuming it should add to a Hero's Health and Mana properties.
 *
 */
public class RejuvenationPotion extends Potion implements Comparable<RejuvenationPotion>
{
	// YOUR CODE HERE

	/*
	 *  Draft
	 *  
	 *  Write the constructor. It should take the same to arguments as the parent class, and send them to the parent constructor.
	 */
	public RejuvenationPotion (String newName , int newSize)
	{
		super(newName, newSize);
	}

	
	/*
	 * Final
	 * 
	 * Implement the Comparable interface
	 * 
	 * Filled potions should always come before unfilled potions.
	 *
	 * If both are filled or both are empty, then
	 * larger potions should come before smaller potions.
	 * So if the size of this potion is greater than the size of the argument, 
	 * return a negative number.
	 * 
	 * Do not compare the names of the potions.
	 * 
	 * (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	   public int compareTo(RejuvenationPotion p)
	   {
		   if(this.GetFilled() && !p.GetFilled())
		   {
			   return -1;
		   }
		   if(!this.GetFilled() && p.GetFilled())
		   {
			   return 1;   
		   }
		   if(this.GetSize() > p.GetSize())
		   {
			   return -1;
		   
		   }
		   if(this.GetSize() < p.GetSize())
		   {
			   return 1;
		   }
		   
		   return 0;
	   }

	/*
	 * Final
	 * 
	 * Implement the Consumable interface
	 * 
	 * This method should add to both the Health and Mana properties of the Hero.
	 * A rejuvenation potion is like both a health and mana potion.
	 * It should only work if it has not already been consumed.
	 * 
	 */
	   public void Consume(Hero h)
	   {
		   if(this.GetFilled())
		   {
		  h.SetMana(this.GetSize() + h.GetMana()); 
		  h.SetHealth(this.GetSize() + h.GetHealth());
		  this.SetFilled(false);
		   }
		   
	   }
}

